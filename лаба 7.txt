#include <iostream>
#include <pthread.h>
#include <dirent.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include <cstring>
#include <vector>
#include <string>
#include <sys/types.h>

struct ThreadData {
    std::string sourceDir;
    std::string targetDir;
};

void* copyFile(void* arg) {
    const char* sourceFile = static_cast<const char*>(arg);
    
    ThreadData* data = reinterpret_cast<ThreadData*>(arg);
    std::string targetFile = data->targetDir + "/" + std::string(sourceFile).substr(data->sourceDir.length() + 1);

    int srcFd, destFd;
    char buffer[4096];
    ssize_t bytesRead;

    while ((srcFd = open(sourceFile, O_RDONLY)) == -1 && errno == EMFILE) {
        sleep(1); // Ждем перед повторной попыткой
    }

    if (srcFd == -1) {
        perror("open source file");
        return nullptr;
    }

    while ((destFd = open(targetFile.c_str(), O_WRONLY | O_CREAT | O_TRUNC, 0644)) == -1 && errno == EMFILE) {
        close(srcFd);
        sleep(1);
    }

    if (destFd == -1) {
        perror("open target file");
        close(srcFd);
        return nullptr;
    }

    while ((bytesRead = read(srcFd, buffer, sizeof(buffer))) > 0) {
        write(destFd, buffer, bytesRead);
    }

    close(srcFd);
    close(destFd);
    
    return nullptr;
}

void* copyDirectory(void* arg) {
    ThreadData* data = static_cast<ThreadData*>(arg);
    
    DIR* dir = opendir(data->sourceDir.c_str());
    if (!dir) {
        perror("opendir");
        return nullptr;
    }

    struct dirent* entry;
    
    mkdir(data->targetDir.c_str(), 0755);

    while ((entry = readdir(dir)) != nullptr) {
        if (strcmp(entry->d_name, ".") == 0 || strcmp(entry->d_name, "..") == 0) {
            continue;
        }

        std::string sourcePath = data->sourceDir + "/" + entry->d_name;
        std::string targetPath = data->targetDir + "/" + entry->d_name;

        struct stat st;
        
        if (stat(sourcePath.c_str(), &st) == -1) {
            perror("stat");
            continue;
        }

        if (S_ISDIR(st.st_mode)) {
            ThreadData* newData = new ThreadData{sourcePath, targetPath};
            pthread_t threadId;
            pthread_create(&threadId, nullptr, copyDirectory, newData);
            pthread_detach(threadId);
        } else if (S_ISREG(st.st_mode)) {
            pthread_t threadId;
            pthread_create(&threadId, nullptr, copyFile, strdup(sourcePath.c_str()));
            pthread_detach(threadId);
        }
        
    }

    closedir(dir);
    
    return nullptr;
}

int main(int argc, char* argv[]) {
    if (argc != 3) {
        std::cerr << "Usage: " << argv[0] << " <source_directory> <target_directory>" << std::endl;
        return 1;
    }

    ThreadData data{argv[1], argv[2]};
    
    pthread_t mainThreadId;
    
    pthread_create(&mainThreadId, nullptr, copyDirectory, &data);
    
    pthread_join(mainThreadId, nullptr);
    
    return 0;
}