#include <iostream>
#include <thread>
#include <mutex>
#include <vector>
#include <chrono>
#include <random>

const int NUM_PHILOSOPHERS = 5;

std::mutex forks[NUM_PHILOSOPHERS];

void philosopher(int id) {
    std::default_random_engine generator;
    std::uniform_int_distribution<int> distribution(100, 500);

    while (true) {
        std::cout << "Philosopher " << id << " is thinking." << std::endl;
        std::this_thread::sleep_for(std::chrono::milliseconds(distribution(generator)));

        if (id % 2 == 0) {
            forks[id].lock();
            std::cout << "Philosopher " << id << " picked up left fork " << id << "." << std::endl;
            forks[(id + 1) % NUM_PHILOSOPHERS].lock();
            std::cout << "Philosopher " << id << " picked up right fork " << (id + 1) % NUM_PHILOSOPHERS << "." << std::endl;
        } else {
            forks[(id + 1) % NUM_PHILOSOPHERS].lock();
            std::cout << "Philosopher " << id << " picked up right fork " << (id + 1) % NUM_PHILOSOPHERS << "." << std::endl;
            forks[id].lock();
            std::cout << "Philosopher " << id << " picked up left fork " << id << "." << std::endl;
        }

        std::cout << "Philosopher " << id << " is eating." << std::endl;
        std::this_thread::sleep_for(std::chrono::milliseconds(distribution(generator)));

        forks[id].unlock();
        forks[(id + 1) % NUM_PHILOSOPHERS].unlock();
    }
}

int main() {
    std::vector<std::thread> philosophers;

    for (int i = 0; i < NUM_PHILOSOPHERS; ++i) {
        philosophers.emplace_back(philosopher, i);
    }

    for (auto& philosopher : philosophers) {
        philosopher.join();
    }

    return 0;
}